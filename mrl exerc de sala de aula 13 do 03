{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN8IA0+JWaB37wgZWx30fUe",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/murilomco/ALGESTDADOS_20251/blob/main/mrl%20exerc%20de%20sala%20de%20aula%2013%20do%2003\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "2M_rhyqxTghI",
        "outputId": "3a8131e1-6b6e-4784-d21a-85c68dd9410d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "insira um números6\n",
            "insira outro número6\n",
            "12\n"
          ]
        }
      ],
      "source": [
        "#Peça dois números ao usuário e exiba a soma.\n",
        "number1 = int(input('insira um números:'))\n",
        "number2 = int(input('insira outro número:'))\n",
        "soma = number1+number2\n",
        "print(number1+number2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Solicite o primeiro e o último nome do usuário e exiba o nome completo.\n",
        "primeiro = input('insira o seu primeiro nome:')\n",
        "ultimo = input('insira o seu último nome:')\n",
        "print('seu nome completo é: '+ primeiro+' '+ultimo) #CONCATENADO\n",
        "\n",
        "#ou\n",
        "\n",
        "print('seu nome completo é: ',primeiro,ultimo) #SEQUÊNCIAL\n",
        "\n",
        "#ou\n",
        "\n",
        "print(f'seu nome completo é: {primeiro} {ultimo}') #FORMATADO\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B2Yjyz-UZQDk",
        "outputId": "d0a255e9-2b56-4440-feda-4c21a76f73c6"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "insira o seu primeiro nome:MURILO\n",
            "insira o seu último nome:MIRANDA CORREIA\n",
            "seu nome completo é: MURILO MIRANDA CORREIA\n",
            "seu nome completo é:  MURILO MIRANDA CORREIA\n",
            "seu nome completo é: MURILO MIRANDA CORREIA\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Peça uma palavra e um número ao usuário e exiba a palavra repetida esse número de vezes.\n",
        "palavra = input('insira uma palavra aleatória: ')\n",
        "numero = int(input('digite um numero: '))\n",
        "palavra = (palavra +', ')\n",
        "print(palavra*numero)\n",
        "\n",
        "#ou\n",
        "\n",
        "palavra = (palavra +'\\n') #para adicionar um parágrafo\n",
        "print(palavra*numero)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lX53gCO7cOxi",
        "outputId": "0ddf7940-75b9-485c-eb3b-aca593a95f11"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "insira uma palavra aleatória: mrl\n",
            "digite um numero: 10\n",
            "mrl, mrl, mrl, mrl, mrl, mrl, mrl, mrl, mrl, mrl, \n",
            "mrl, \n",
            "mrl, \n",
            "mrl, \n",
            "mrl, \n",
            "mrl, \n",
            "mrl, \n",
            "mrl, \n",
            "mrl, \n",
            "mrl, \n",
            "mrl, \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Solicite um texto e exiba-o em letras maiúsculas.\n",
        "texto = input('insira um texto: ')\n",
        "print(texto.upper()) #para deixar maiúsculo\n",
        "\n",
        "print(texto.lower()) #para deixar minúsculo\n",
        "\n",
        "print(texto.capitalize()) #para deixar com a primeira letra maiúscula\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tJqFTJFLgay3",
        "outputId": "5755fc0e-5de3-4003-ab8b-b7e287d711e0"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "insira um texto: murilo\n",
            "MURILO\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Peça uma palavra e exiba quantos caracteres ela tem.\n",
        "palavra =input('insira uma palavra:')\n",
        "print(f'sua palavra possui {len(palavra)} letras')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VAeZIcdyhbdG",
        "outputId": "c9950b5a-c91e-4bf8-e2ed-f1760f86f229"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "insira uma palavra:mrl\n",
            "sua palavra possui 3 letras\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Mostre a data e a hora atuais.\n",
        "from datetime import datetime\n",
        "data_e_hora_atuais = datetime.now()\n",
        "data_e_hora_em_texto = data_e_hora_atuais.strftime('%d/%m/%Y %H:%M')\n",
        "print(f'DATA/HORA atuais: {data_e_hora_em_texto}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "idV06CLoi1kj",
        "outputId": "0b3e3dd4-e17d-4299-9b35-8cdc46d7ead4"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DATA/HORA atuais: 13/03/2025 17:34\n"
          ]
        }
      ]
    }
  ]
}